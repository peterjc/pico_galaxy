<tool id="signalp3" name="SignalP 4.1" version="0.0.19">
    <description>Find signal peptides in protein sequences</description>
    <!-- If job splitting is enabled, break up the query file into parts -->
    <!-- Using 2000 chunks meaning 4 threads doing 500 each is ideal -->
    <parallelism method="basic" split_inputs="fasta_file" split_mode="to_size" split_size="2000" merge_outputs="tabular_file"></parallelism>
    <requirements>
        <requirement type="package">signalp</requirement>
    </requirements>
    <version_command>
python $__tool_directory__/signalp3.py --version
    </version_command>
    <command detect_errors="aggressive">
python $__tool_directory__/signalp3.py $organism $truncate "\$GALAXY_SLOTS" '$fasta_file' '$tabular_file'
    </command>
    <inputs>
        <param name="fasta_file" type="data" format="fasta" label="FASTA file of protein sequences"/>
        <param name="organism" type="select" display="radio" label="Organism">
            <option value="euk">Eukaryote</option>
            <option value="gram+">Gram positive</option>
            <option value="gram-">Gram negative</option>
        </param>
        <param name="truncate" type="integer" label="Truncate sequences to this many amino acids" value="70" help="Use zero for no truncation, maximum value 6000">
            <validator type="in_range" min="0" max="6000" message="Truncation value should be at most 6000. Use zero for no truncation."/>
        </param>
    </inputs>
    <outputs>
        <data name="tabular_file" format="tabular" label="SignalP $organism results" />
    </outputs>
    <tests>
        <test>
            <param name="fasta_file" value="four_human_proteins.fasta" ftype="fasta"/>
            <param name="organism" value="euk"/>
            <param name="truncate" value="0"/>
            <output name="tabular_file" file="four_human_proteins.signalp3.tabular" ftype="tabular"/>
        </test>
        <test>
            <param name="fasta_file" value="empty.fasta" ftype="fasta"/>
            <param name="organism" value="euk"/>
            <param name="truncate" value="60"/>
            <output name="tabular_file" file="empty_signalp3.tabular" ftype="tabular"/>
        </test>
        <test>
            <param name="fasta_file" value="empty.fasta" ftype="fasta"/>
            <param name="organism" value="gram+"/>
            <param name="truncate" value="80"/>
            <output name="tabular_file" file="empty_signalp3.tabular" ftype="tabular"/>
        </test>
        <test>
            <param name="fasta_file" value="empty.fasta" ftype="fasta"/>
            <param name="organism" value="gram-"/>
            <param name="truncate" value="0"/>
            <output name="tabular_file" file="empty_signalp3.tabular" ftype="tabular"/>
        </test>
        <test>
            <param name="fasta_file" value="rxlr_win_et_al_2007.fasta" ftype="fasta"/>
            <param name="organism" value="euk"/>
            <param name="truncate" value="70"/>
            <output name="tabular_file" file="rxlr_win_et_al_2007_sp3.tabular" ftype="tabular"/>
        </test>
    </tests>
    <help>

**What it does**

This calls the SignalP v4.1 tool for prediction of signal peptides.

The input is a FASTA file of protein sequences, and the output is tabular (one row per protein).

**Truncation**

Signal peptides are found at the start of a protein, so there is limited value in providing the full length sequence, and providing the full sequence slows down the analysis. Furthermore, SignalP has an upper bound on the sequence length it will accept (6000bp). Thus for practical reasons it is useful to truncate the proteins before passing them to SignalP. However, the precise point they are truncated does have a small influence on some score values, and thus to the results.

**References**

If you use this Galaxy tool in work leading to a scientific publication please
cite the following papers:

Peter J.A. Cock, Björn A. Grüning, Konrad Paszkiewicz and Leighton Pritchard (2013).
Galaxy tools and workflows for sequence analysis with applications
in molecular plant pathology. PeerJ 1:e167
https://doi.org/10.7717/peerj.167

Bendtsen, Nielsen, von Heijne, and Brunak (2004).
Improved prediction of signal peptides: SignalP 3.0.
J. Mol. Biol., 340:783-795.
https://doi.org/10.1016/j.jmb.2004.05.028

Nielsen, Engelbrecht, Brunak and von Heijne (1997).
Identification of prokaryotic and eukaryotic signal peptides and prediction of their cleavage sites.
Protein Engineering, 10:1-6.
https://doi.org/10.1093/protein/10.1.1

Nielsen and Krogh (1998).
Prediction of signal peptides and signal anchors by a hidden Markov model.
Proceedings of the Sixth International Conference on Intelligent Systems for Molecular Biology (ISMB 6),
AAAI Press, Menlo Park, California, pp. 122-130.
http://www.ncbi.nlm.nih.gov/pubmed/9783217

See also http://www.cbs.dtu.dk/services/SignalP-3.0/output.php

This wrapper is available to install into other Galaxy Instances via the Galaxy
Tool Shed at http://toolshed.g2.bx.psu.edu/view/peterjc/tmhmm_and_signalp
    </help>
    <citations>
        <citation type="doi">10.7717/peerj.167</citation>
        <citation type="doi">10.1016/j.jmb.2004.05.028</citation>
        <citation type="doi">10.1093/protein/10.1.1</citation>
        <!-- TODO - Add bibtex entry for PMID: 9783217 -->
    </citations>
</tool>
